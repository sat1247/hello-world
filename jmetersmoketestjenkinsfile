#!groovy

pipeline {

    parameters {
      string(name: "SLAVE_TARGET", defaultValue: "master", description: "slave machine that responsible to execute tasks")
	  string(name: "BUILD_DIR", defaultValue: "D:/Testing/jmeter", description: "")
      string(name: "DEPLOY_DIR", defaultValue: "D:/BUILD_Packages/QA/Batch", description: "")	  
  }
  
   agent { label "${SLAVE_TARGET}" }
   
   stages {	 
	   stage("publish Resullts with ant")
	   {
	   steps
	   {
		  dir('C:/jmeter/extras') 
		  {
			 // def antHome = tool 'ant'
     		     //  bat "pushd c:\\jmeter\\extras && c:\\ant\\bin\\ant -f build.xml"
			  //step([$class: 'ArtifactArchiver', artifacts: 'devtestreport.html', fingerprint: true])
			// bat ("C:/jmeter/bin/jmeter.bat -Jjmeter.save.saveservice.output_format=xml -n -t D:/Testing/jmeter/urltestscript.jmx -l D:/Testing/jmeter/devtestreport.jtl")
	         
			//  perfReport 'devtestreport.csv'
			  
			  bat (script: "C:/jmeter/bin/jmeter.bat -Jjmeter.save.saveservice.output_format=xml -n -t D:/Testing/jmeter/urltestscript.jmx -l D:/Testing/jmeter/devtestreport.jtl", returnStdout: false)
			  step([$class: 'ArtifactArchiver', artifacts: '**/*.jtl, **/jmeter.log'])
			  performanceReport parsers: [[$class: 'JMeterParser', glob: "devtestreport.jtl"]], errorFailedThreshold: 1, errorUnstableThreshold: 1,  relativeFailedThresholdNegative: 0, relativeFailedThresholdPositive: 0, relativeUnstableThresholdNegative: 0, relativeUnstableThresholdPositive: 0
  
       			
           }   
	   }
	   } 
     
   }
	
}
