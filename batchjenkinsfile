#!groovy

pipeline {

    parameters {
          string(name: "SLAVE_TARGET", defaultValue: "master", description: "slave machine that responsible to execute tasks")
	  string(name: "SVN_GOAL", defaultValue: "checkout", description: "")
	  string(name: "SVN_REPO", defaultValue: "https://atlsvn01/svn/SHWebFramework/branch/", description: "")
	  string(name: "SVN_BRANCH", defaultValue: "qa", description: "")
	  string(name: "SVN_CREDS", defaultValue: "a8b7638d-d411-469e-8d93-40efd4a899cd", description: "")
	  string(name: "MVN_GOAL", defaultValue: "clean package", description: "")
	  string(name: "MVN_REPO", defaultValue: "C:/.m2/repository", description: "")
          string(name: "BUILD_DIR", defaultValue: "D:/pipeline/rmqa/SHWebFramework", description: "")
          string(name: "DEPLOY_DIR", defaultValue: "D:/BUILD_Packages/QA/Batch", description: "")	  
  }

 agent { label "${SLAVE_TARGET}" }
 
  stages {
  
     stage("scm-checkout") {
	   when {
	      environment name: "SVN_GOAL", value: "checkout"
	   }
     steps {
	     script {
	       dir("${BUILD_DIR}"){
		   if ("${SVN_BRANCH}" != ""){		     		 
		        checkout([$class: 'SubversionSCM', additionalCredentials: [], excludedCommitMessages: '', excludedRegions: '', excludedRevprop: '', excludedUsers: '', filterChangelog: false, ignoreDirPropChanges: false, includedRegions: '', locations: [[credentialsId: '${SVN_CREDS}', depthOption: 'infinity', ignoreExternalsOption: true, local: '.', remote: '${SVN_REPO}${SVN_BRANCH']], workspaceUpdater: [$class: 'UpdateUpdater']])
		   		   echo 'scm checkout is done'
				   }
		   else {
		      echo "please provide svn branch name"
		   }
		   }
		 }
	   }
	 }  
     stage("scm-build")
	      {
		      steps {		      
			  dir("${BUILD_DIR}")
		           {
		             //sh("mvn -P=Batch -Denv=qa clean package")
		               bat("cd")
		             // withMaven(maven:'Maven_3_3_9', mavenLocalRepo: '.repository',mavenSettingsConfig:'my-config') {
				   bat("mvn -Dmaven.repo.local=-Dmaven.repo.local=${MVN_REPO}  ${MVN_GOAL} -Denv=qa -P=Batch")
					  stash name: "qa-batch", includes: "./*/target/*.jar"					  							 
		             //}
			       }  
			      dir("${DEPLOY_DIR}")
					{
					    unstash "qa-batch"
					}
                  }
	      } 
  
  
  
  }


}
